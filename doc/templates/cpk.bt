LittleEndian();

char magic[4]; //CPK\x20

local int offset_save = 0;

#define STORAGE_MASK 0xF0
#define STORAGE_NONE 0x00
#define STORAGE_ZERO 0x10
#define STORAGE_CONSTANT 0x30
#define STORAGE_PER_ROW 0x50

#define TYPE_MASK 0x0f 
#define TYPE_DATA 0x0b 
#define TYPE_STRING 0x0a 
#define TYPE_FLOAT 0x08 
#define TYPE_8BYTE2 0x07 
#define TYPE_8BYTE 0x06 
#define TYPE_4BYTE2 0x05 
#define TYPE_4BYTE 0x04 
#define TYPE_2BYTE2 0x03 
#define TYPE_2BYTE 0x02 
#define TYPE_1BYTE2 0x01 
#define TYPE_1BYTE 0x00 

struct UTF_OBJ {
    BigEndian();

    uint32 table_size;
    uint32 rows_offset;
    uint32 strings_offset;
    uint32 data_offset;

    uint32 table_name;
    uint16 num_columns;
    uint16 row_length;
    uint32 num_rows;
    
    struct {
        struct UTF_COLUMN {
            if(ReadByte() == 0) { FSkip(4); }
            uchar flags; //TODO: flag bit things?
            uint32 name_offset;
            offset_save = FTell();
            FSeek(name_offset + strings_offset + 24);
            string name;
            FSeek(offset_save);
        } column[num_columns] <optimize=false,read=name>;
    } columns <bgcolor=cRed>;

    struct {
        local int i;
        local int a;
        for(i = 0; i < num_rows; i++) {
            FSeek(rows_offset + (i * row_length) + 24);
            struct UTF_ROW {
                for(a = 0; a < num_columns; a++) {
                    struct  {
                        local int storage_flag = columns.column[a].flags & STORAGE_MASK;
                        if(storage_flag != STORAGE_NONE
                            && storage_flag != STORAGE_ZERO
                            && storage_flag != STORAGE_CONSTANT) {
                            
                            local int type = columns.column[a].flags & TYPE_MASK;
                        
                            switch(type) {
                                case TYPE_1BYTE:
                                case TYPE_1BYTE2:
                                    uchar data;
                                    break;
                                case TYPE_2BYTE:
                                case TYPE_2BYTE2:
                                    uint16 data;
                                    break;
                                case TYPE_4BYTE:
                                case TYPE_4BYTE2:
                                    uint32 data;
                                    break;
                                case TYPE_8BYTE:
                                case TYPE_8BYTE2:
                                    uint64 data;
                                    break;
                                case TYPE_FLOAT:
                                    float data;
                                    break;
                                case TYPE_STRING:
                                    uint32 string_offset;
                                    offset_save = FTell();
                                    FSeek(string_offset + strings_offset + 24);
                                    string data;
                                    FSeek(offset_save);
                                    break;
                                case TYPE_DATA:
                                    Assert(false);
                                    break;
                            }
                        }
                    } data_obj;
                    
                }
            } row;
        }
        
    } rows <bgcolor=cBlue>;
    
};

struct UTF {
    uint32 unk;
    uint64 packet_size;
    char magic[4]; //@UTF
    UTF_OBJ packet;
} utf;

